name: clone-docker

# 触发条件
on:
  issues:
    types: [opened, edited]
    if: contains(github.event.issue.labels.*.name, 'clone-docker')

# 任务列表
jobs:

  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Debug event data
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Full event data: ${{ toJson(github.event) }}"
          echo "Added files: ${{ toJson(github.event.commit.added) }}"
          echo "Modified files: ${{ toJson(github.event.commit.modified) }}"

  # 处理 clone-docker 标签的任务
  clone_docker:
    name: clone_docker
    # 运行环境
    runs-on: ubuntu-latest
    # 运行条件 => issues 的 label 包含 clone-docker
    if: contains(github.event.issue.labels.*.name, 'clone-docker')
    # 任务步骤列表
    steps:
  
      - name: Clean up unused files
        run: |
          sudo apt-get clean
          rm -rf ~/.cache/*
          df -h
      
      - name: Stop Docker service
        run: sudo systemctl stop docker

      - name: Move existing Docker data (if any)
        run: |
          if [ -d /var/lib/docker ]; then
            sudo mv /var/lib/docker/ /mnt/
          fi

      - name: Configure Docker to use /mnt/docker
        run: |
          echo '{
            "data-root": "/mnt/docker"
          }' | sudo tee /etc/docker/daemon.json

      - name: Start Docker service
        run: sudo systemctl start docker

      - name: Verify Docker storage directory
        run: docker info | grep "Docker Root Dir"
        
      # 1. 从 issue 正文中提取仓库地址和镜像标签
      - name: Extract repository URL and tag from issue body
        id: extract_repo_and_tag
        run: |
          REPO_URL=$(echo '${{ github.event.issue.body }}' | jq -r '.repository')
          TAG=$(echo '${{ github.event.issue.body }}' | jq -r '.tag')
          REPO_DIR=$(basename "${REPO_URL}" .git)
          echo "Extracted repository URL: $REPO_URL"
          echo "Extracted tag: $TAG"
          echo "Extracted tag: $REPO_DIR"
          echo "::set-output name=repo_url::$REPO_URL"
          echo "::set-output name=tag::$TAG"
          echo "::set-output name=repo_dir::$REPO_DIR"

      # 2. Clone 代码仓库
      - name: Clone repository
        run: |
          git clone ${{ steps.extract_repo_and_tag.outputs.repo_url }}

      # 3. 登录阿里云容器镜像仓库
      - name: Log in to Alibaba Cloud Container Registry
        uses: docker/login-action@v2
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 4. 构建 Docker 镜像
      - name: Build Docker image
        run: cd ${{ steps.extract_repo_and_tag.outputs.repo_dir }} && DOCKER_BUILDKIT=1 docker build -t ${{ secrets.DOCKER_REPOSITORY }}/${{ steps.extract_repo_and_tag.outputs.tag }} .

      # 5. 推送 Docker 镜像到阿里云容器镜像仓库
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_REPOSITORY }}/${{ steps.extract_repo_and_tag.outputs.tag }}

      # 6. 当以上步骤成功时，为 issues 添加 success 标签
      - name: Success issues
        if: ${{ success() }}
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['success']
            })
      # 7. 当以上步骤失败时，为 issues 添加 failure 标签，并为其添加失败原因评论
      - name: Failure issues
        if: ${{ failure() }}
        uses: actions/github-script@v5
        with:
          run: df -vh
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['failure']
            })
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "[构建失败，点击查看](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            })

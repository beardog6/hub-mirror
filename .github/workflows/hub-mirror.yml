name: hub-mirror

# 触发条件
on:
  issues:
    types: [opened, edited]
  push:
    paths:
      - 'Dockerfile'
  pull_request:
    paths:
      - 'Dockerfile'

# 任务列表
jobs:
  # 镜像转换任务
  mirror_transition:
    # 运行环境
    runs-on: ubuntu-latest
    # 运行条件 => issues 的 label 包含 hub-mirror
    if: contains(github.event.issue.labels.*.name, 'hub-mirror')
    # 镜像转换任务的步骤列表
    steps:
      # 1. 切换分支（默认主分支）
      - name: Check out code
        uses: actions/checkout@v2
      # 2. 设置 go 环境
      - name: Setup go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      # 3. 运行 go 代码
      - name: Run code
        run: go run main.go --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_TOKEN }} --repository=${{ secrets.DOCKER_REPOSITORY }} --content='${{ github.event.issue.body }}' --maxContent=11 --outputPath=output.md
      # 4. 当成功输出 output.md 文件时，为 issues 添加评论
      - name: Add comment
        if: ${{ hashFiles('output.md') }}
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs')
            const data = fs.readFileSync('output.md', 'utf8')
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: data
            })
      # 5. 当以上步骤成功时，为 issues 添加 success 标签
      - name: Success issues
        if: ${{ success() }}
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['success']
            })
      # 6. 当以上步骤失败时，为 issues 添加 failure 标签，并为其添加失败原因评论
      - name: Failure issues
        if: ${{ failure() }}
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['failure']
            })
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "[构建失败，点击查看](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            })

  # 镜像构建和推送任务
  build_and_push_image:
    # 运行环境
    runs-on: ubuntu-latest
    # 运行条件 => 当 Dockerfile 被创建或修改时触发
    if: ${{ github.event_name == 'push' && (contains(github.event.commit.added, 'Dockerfile') || contains(github.event.commit.modified, 'Dockerfile')) }}
    # 镜像构建和推送任务的步骤列表
    steps:
      - name: Debug event data
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Added files: ${{ toJson(github.event.commit.added) }}"
          echo "Modified files: ${{ toJson(github.event.commit.modified) }}"
          
      # 1. 切换分支（默认主分支）
      - name: Check out code
        uses: actions/checkout@v2

      # 2. 提取 Dockerfile 的第一行注解作为镜像标签
      - name: Extract image tag from Dockerfile
        id: extract_tag
        run: |
          TAG=$(sed -n '1s/^# NAME: //p' Dockerfile)
          echo "Extracted tag: $TAG"
          echo "::set-output name=tag::$TAG"

      # 3. 登录阿里云容器镜像仓库
      - name: Log in to Alibaba Cloud Container Registry
        uses: docker/login-action@v2
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 4. 构建 Docker 镜像
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_REPOSITORY }}/${{ steps.extract_tag.outputs.tag }} .

      # 5. 推送 Docker 镜像到阿里云容器镜像仓库
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_REPOSITORY }}/${{ steps.extract_tag.outputs.tag }}
